description: Template to install JupyterLab
# ocata version, 2023-02-14
# pike version, 2023-02-14
heat_template_version: 2018-03-02

# input parameters that have to be provided when instantiating template
# optional and can be omitted when no input is required
# customize each deployment (e.g. setting custom user names or passwords)
# or binding to environment-specifics like certain images
# https://docs.openstack.org/heat/pike/template_guide/hot_spec.html#parameters-section

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instance
    constraints:
      - custom_constraint: nova.keypair
        description: Must name a public key (pair) known to Nova

resources:
  data_volume:
    type: OS::Cinder::Volume
    properties:
      name: "data"
      size: <SIZE>
      volume_type: "encrypted"

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for Jupyter Notebook
      name: jupyter_security_group
      rules:
        - direction: ingress
          ethertype: IPv4
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
          remote_ip_prefix: ::/0
        - direction: ingress
          ethertype: IPv4
          port_range_min: 8888
          port_range_max: 8888
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          port_range_min: 8888
          port_range_max: 8888
          protocol: tcp
          remote_ip_prefix: ::/0
        - direction: ingress
          ethertype: IPv4
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          protocol: icmp
          remote_ip_prefix: ::/0
  instance:
    type: OS::Nova::Server
    properties:
      flavor: <FLAVOR>
      key_name: { get_param: key_name }
      image: <IMAGE>
      security_groups:
        - { get_resource: security_group }
      networks:
        - network: default
      user_data: |
       #!/bin/bash

       wall "See /home/ubuntu/heat_stack_log.out"
       exec 3>&1 4>&2
       trap 'exec 2>&4 1>&3' 0 1 2 3
       exec 1>/home/ubuntu/heat_stack_log.out 2>&1
       set -x #debug
       
       cd /home/ubuntu
       touch /home/ubuntu/status_starting_provision
       repo="<REPO>"
       repobranch="<REPO-BRANCH>"
       if [ -z $repo ]; then wall "repo not specified"; mv /home/ubuntu/status_* /home/ubuntu/status_repo_not_specified; exit 1; fi 

       wall "Install Docker"
       mv /home/ubuntu/status_* /home/ubuntu/status_install_docker
       apt update
       apt install -qq -y  ca-certificates curl gnupg lsb-release
       mkdir -p /etc/apt/keyrings
       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch --yes -o /etc/apt/keyrings/docker.gpg
       chmod a+r /etc/apt/keyrings/docker.gpg
       echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
       apt update
       apt install -qq -y  docker-ce docker-ce-cli containerd.io
       usermod -aG docker "ubuntu"
       
       mv /home/ubuntu/status_* /home/ubuntu/status_cloning_repo
       wall "Cloning repo ${repo} ${repobranch}"
       #  repo="https://github.com/cybera/ookla-statcan-analysis.git"
       git clone -b ${repobranch} ${repo} 
       repoName=$(basename "${repo}" .git)
       cd $repoName
       envName=$(grep 'name:' environment.yml | cut -c 7-)
       if [ -z $envName ]; then wall "environment.yml not found in repo or name parameter not found in environment.yml"; mv /home/ubuntu/status_* /home/ubuntu/status_env_name_not_found; exit 1; fi
       
       if [[ -f /usr/local/bin/enableAutoUpdate ]]; then
        /usr/local/bin/enableAutoUpdate
       fi

       mv /home/ubuntu/status_* /home/ubuntu/status_mounting_vol
       wall "Prepping and mounting volume"

       vol="/dev/sdc"
       ip6=$(ip -6 addr show ens3 | awk '/2605/ { print $2 }' | awk 'BEGIN { FS="/"; } { print $1 }')
       dns_name=$(dig +short -x $ip6 @ns-yyc.cloud.cybera.ca)
       dns_name=${dns_name::-1}
       if [[ -e "${vol}" ]]; then
         fs=$(blkid -o value -s TYPE $vol)
         if [[ $fs != "ext4" ]]; then
           mkfs -t ext4 $vol
         fi
         mkdir /home/ubuntu/tmp
         mv /home/ubuntu/$repoName/data/* /home/ubuntu/tmp
         mount $vol /home/ubuntu/$repoName/data
         mv /home/ubuntu/tmp/* /home/ubuntu/$repoName/data
         dev_path=$(readlink -f $vol)
         uuid=$(lsblk -no uuid $dev_path)
         echo "UUID=${uuid} /home/ubuntu/$repoName/data ext4 defaults 0 1 " | tee --append  /etc/fstab
       fi

       wall "Docker Compose"
       mv /home/ubuntu/status_* /home/ubuntu/status_docker_compose
       sudo -u ubuntu docker compose up -d 
       dockerID=$(docker ps -aqf "name=^ookla-statcan-analysis-jupyter-1$")

       v6ip=$(ip -6 addr|awk '{print $2}'|grep -P '^(?!fe80)[[:alnum:]]{4}:.*/64'|cut -d '/' -f1)
       urlLine=$(docker logs $dockerID 2>&1 | grep 127.0.0.1 | head -1)
       pp=[$v6ip]
       accessURL=${urlLine//127.0.0.1/$pp}
       echo $accessURL > /home/ubuntu/jupyterlink.txt

       # docker ps -a
       # docker rm $(docker ps -a -f status=exited -q)
       # docker rmi $(docker images -a -q)

       wall "Docker container started! You should now be able to go to $accessURL"

       cd /home/ubuntu
       wall "Installing AWS CLI"
       mv /home/ubuntu/status_* /home/ubuntu/status_install_aws
       apt-get -qq install unzip
       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
       unzip awscliv2.zip
       ./aws/install

       wall "Finding data init script..."
       mv /home/ubuntu/status_* /home/ubuntu/status_starting_data_init
       cd /home/ubuntu/$repoName
       FILE=data_init.sh
       if [[ -f "$FILE" ]]; then
        wall "$FILE exists - Data installation may take a long time"
        chmod +x data_init.sh
        ./data_init.sh
       else
        wall "$FILE not found"
       fi

       cd /home/ubuntu
       wall "Data install Complete! Access lab $accessURL"
       mv /home/ubuntu/status_* /home/ubuntu/status_data_init_complete


  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: data_volume }
      instance_uuid: { get_resource: instance }

outputs:
  instance_detail:
    description: 
    value: { get_attr: [instance, show] }

