description: Template to install JupyterLab
# ocata version, 2023-02-14
# pike version, 2023-02-14
heat_template_version: 2023-02-14

# input parameters that have to be provided when instantiating template
# optional and can be omitted when no input is required
# customize each deployment (e.g. setting custom user names or passwords)
# or binding to environment-specifics like certain images
# https://docs.openstack.org/heat/pike/template_guide/hot_spec.html#parameters-section
parameters:
  name:
    type: string

 email:
    type: string
    label: Administrator email
    description: Enter an email for ssl cert alerts.

  flavor:
    type: string
    label: Flavor
    description: The type of instance (flavor) to be used.
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor

  volume-size:
    type: string
    description: Volume size of the system volume of the Virtual Server
    default: 50

  image-name:
    type: string
    description: The name of the RAC image to use for the instance
    default: "Ubuntu 20.04"

  repo:
    type: string
    description: The URL of the github repo to clone after setup


resources:
  data_volume:
    type: OS::Cinder::Volume
    properties:
      name: "data"
      size: { get_param: volume_size }
      volume_type: "M1"

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for Jupyter Notebook
      name: jupyter_security_group
      rules:
        - direction: ingress
          ethertype: IPv4
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
          remote_ip_prefix: ::/0
        - direction: ingress
          ethertype: IPv4
          port_range_min: 443
          port_range_max: 443
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          port_range_min: 443
          port_range_max: 443
          protocol: tcp
          remote_ip_prefix: ::/0
        - direction: ingress
          ethertype: IPv4
          port_range_min: 80
          port_range_max: 80
          protocol: tcp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          port_range_min: 80
          port_range_max: 80
          protocol: tcp
          remote_ip_prefix: ::/0
        - direction: ingress
          ethertype: IPv4
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0
        - direction: ingress
          ethertype: IPv6
          protocol: icmp
          remote_ip_prefix: ::/0
  instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      image: "Ubuntu 20.04"
      security_groups:
        - { get_resource: security_group }
      networks:
        - network: default
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash -v
                  sleep 120
                  if [[ -f /usr/local/bin/enableAutoUpdate ]]; then
                  /usr/local/bin/enableAutoUpdate
                  fi
                  mkdir /data
                  vol_id="%VOLUME_ID%"
                  vol="/dev/disk/by-id/scsi-0QEMU_QEMU_HARDDISK_$(echo ${vol_id} | cut -c -20)"
                  ip6=$(ip -6 addr show ens3 | awk '/2605/ { print $2 }' | awk 'BEGIN { FS="/"; } { print $1 }')
                  dns_name=$(dig +short -x $ip6 @ns-yyc.cloud.cybera.ca)
                  dns_name=${dns_name::-1}
                  if [[ -e "${vol}" ]]; then
                    fs=$(blkid -o value -s TYPE $vol)
                    if [[ $fs != "ext4" ]]; then
                      mkfs -t ext4 $vol
                    fi
                    mount $vol /data
                    dev_path=$(readlink -f $vol)
                    uuid=$(lsblk -no uuid $dev_path)
                    echo "UUID=${uuid} /data ext4 defaults 0 1 " | tee --append  /etc/fstab
                  fi
                  mkdir /data/notebooks
                  add-apt-repository ppa:certbot/certbot -y
                  apt-get update
                  apt-get install -y software-properties-common
                  apt-get install -y certbot python3.8 python3-pip 
                  certbot certonly --standalone -n -m %EMAIL% --agree-tos -d $dns_name
                  pip3 install jupyterlab

                path: /tmp/bootstrap.sh
                permissions: '0700'
            runcmd:
              - /tmp/bootstrap.sh > /var/log/bootstrap.log 2>&1
        params:
            "%VOLUME_ID%": { get_param: data_volume }
            "%EMAIL%": { get_param: email }

outputs:
  instance_detail:
    description: 
    value: { get_attr: [instance, show] }

  SERVER_01_NETWORK:
    description: 
    value: { get_attr: [instance, networks] }

  SERVER_01_IP:
    description: 
    value: { get_attr: [instance, addresses,{ get_param: default }, 0, port] }
            
